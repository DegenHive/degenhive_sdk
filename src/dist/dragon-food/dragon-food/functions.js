"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.kraftGenesisHoney = kraftGenesisHoney;
exports.accessDragonDen = accessDragonDen;
exports.accessDragonDenFruitClaimIndex = accessDragonDenFruitClaimIndex;
exports.accessDragonDenWithRewards0Fruits = accessDragonDenWithRewards0Fruits;
exports.accessDragonDenWithRewards1Fruits = accessDragonDenWithRewards1Fruits;
exports.accessDragonDenWithRewards2Fruits = accessDragonDenWithRewards2Fruits;
exports.accessDragonDenWithRewards3Fruits = accessDragonDenWithRewards3Fruits;
exports.accrueYieldForDragonDen = accrueYieldForDragonDen;
exports.addBribeForEmissions = addBribeForEmissions;
exports.addHiveBribeForPoolHive = addHiveBribeForPoolHive;
exports.addHiveToLockedDragonBee = addHiveToLockedDragonBee;
exports.addHoneyBribeForPoolHive = addHoneyBribeForPoolHive;
exports.addHoneyToLockedDragonBee = addHoneyToLockedDragonBee;
exports.addMoreFruits = addMoreFruits;
exports.addMoreFruitsCoins = addMoreFruitsCoins;
exports.calculateFruitRewards = calculateFruitRewards;
exports.castvote = castvote;
exports.castvoteWithcompprofile = castvoteWithcompprofile;
exports.claimBribesForUser = claimBribesForUser;
exports.claimFeesFromYieldFlowForPool = claimFeesFromYieldFlowForPool;
exports.claimFruitForDragonDen = claimFruitForDragonDen;
exports.claimRewardsAndUnbondShares = claimRewardsAndUnbondShares;
exports.claimTradingFeesForUser = claimTradingFeesForUser;
exports.claimVotingRewardsThreePool = claimVotingRewardsThreePool;
exports.claimVotingRewardsThreePoolDragonSchool = claimVotingRewardsThreePoolDragonSchool;
exports.claimVotingRewardsTwoPool = claimVotingRewardsTwoPool;
exports.claimVotingRewardsTwoPoolDragonSchool = claimVotingRewardsTwoPoolDragonSchool;
exports.claimVotingRewardsTwoPoolWithBurnTax = claimVotingRewardsTwoPoolWithBurnTax;
exports.computeBribeForUser = computeBribeForUser;
exports.computeBribesForUser = computeBribesForUser;
exports.depositHiveAsLpIncentives = depositHiveAsLpIncentives;
exports.depositHoneyAsIncentives = depositHoneyAsIncentives;
exports.destroyFruitRewards = destroyFruitRewards;
exports.destroyProposal = destroyProposal;
exports.evaluateproposal = evaluateproposal;
exports.executeproposaltoaddfruit = executeproposaltoaddfruit;
exports.executethreepoolproposal = executethreepoolproposal;
exports.executetwopoolproposal = executetwopoolproposal;
exports.feedBeeInDen = feedBeeInDen;
exports.feedDragonBee = feedDragonBee;
exports.feedDragonBeeSchool = feedDragonBeeSchool;
exports.gameMasterAddHiveToLockedDragonBee = gameMasterAddHiveToLockedDragonBee;
exports.gameMasterAddHoneyToLockedDragonBee = gameMasterAddHoneyToLockedDragonBee;
exports.gameMasterFeedBeeInDen = gameMasterFeedBeeInDen;
exports.gameMasterRequestWithdrawalForDragonBee = gameMasterRequestWithdrawalForDragonBee;
exports.gameMasterWithdrawDragonBee = gameMasterWithdrawDragonBee;
exports.getBribesForPoolHive = getBribesForPoolHive;
exports.getClaimedIndexesForDragonBee = getClaimedIndexesForDragonBee;
exports.getDragonFood = getDragonFood;
exports.getExpectedYield = getExpectedYield;
exports.getFoodEmissions = getFoodEmissions;
exports.getHiveEmissionsVotes = getHiveEmissionsVotes;
exports.getHoneyEmissionsVotes = getHoneyEmissionsVotes;
exports.getLockedBeesInfo = getLockedBeesInfo;
exports.getLockedDragonBeeInfo = getLockedDragonBeeInfo;
exports.getOngoingCycle = getOngoingCycle;
exports.getPoolHive = getPoolHive;
exports.getPoolHiveAddr = getPoolHiveAddr;
exports.getPoolHiveProposal = getPoolHiveProposal;
exports.getPoolHiveProposalFruitLife = getPoolHiveProposalFruitLife;
exports.getPoolHiveProposalParams = getPoolHiveProposalParams;
exports.getTotalVotesForDirectingEmissions = getTotalVotesForDirectingEmissions;
exports.getUserVoteInfo = getUserVoteInfo;
exports.getVoteConfig = getVoteConfig;
exports.getVotesRcvdForCycle = getVotesRcvdForCycle;
exports.incrementDragonFood = incrementDragonFood;
exports.incrementPoolHive = incrementPoolHive;
exports.initializeDragonFoodEmissions = initializeDragonFoodEmissions;
exports.internalAddHiveToDragonBee = internalAddHiveToDragonBee;
exports.internalAddHoneyToDragonBee = internalAddHoneyToDragonBee;
exports.internalCastvote = internalCastvote;
exports.internalClaimVotingRewardsThreePool = internalClaimVotingRewardsThreePool;
exports.internalClaimVotingRewardsTwoPool = internalClaimVotingRewardsTwoPool;
exports.internalDepositNoFruits = internalDepositNoFruits;
exports.internalDepositWith1Fruits = internalDepositWith1Fruits;
exports.internalDepositWith2Fruits = internalDepositWith2Fruits;
exports.internalDepositWith3Fruits = internalDepositWith3Fruits;
exports.internalLockDragonBee = internalLockDragonBee;
exports.internalProcessWithdrawlRequest = internalProcessWithdrawlRequest;
exports.internalUnbondNoFruits = internalUnbondNoFruits;
exports.internalUnbondWith1Fruits = internalUnbondWith1Fruits;
exports.internalUnbondWith2Fruits = internalUnbondWith2Fruits;
exports.internalUnbondWith3Fruits = internalUnbondWith3Fruits;
exports.internalVoteOnEmissions = internalVoteOnEmissions;
exports.internalWithdrawDragonBee = internalWithdrawDragonBee;
exports.kraftNewPoolHiveThreePool = kraftNewPoolHiveThreePool;
exports.kraftNewPoolHiveTwoPool = kraftNewPoolHiveTwoPool;
exports.liquidateLockedLp = liquidateLockedLp;
exports.lockHiveIfTradingDisabled = lockHiveIfTradingDisabled;
exports.lockLpTokensForSchool = lockLpTokensForSchool;
exports.lockLpTokensForTrainer = lockLpTokensForTrainer;
exports.markBribeAsMemeToken = markBribeAsMemeToken;
exports.queryAccessDragonDen = queryAccessDragonDen;
exports.removeexpiredproposal = removeexpiredproposal;
exports.removeExpiredFruit = removeExpiredFruit;
exports.requestWithdrawalForDragonBee = requestWithdrawalForDragonBee;
exports.stakeLp = stakeLp;
exports.stakeLp0Fruits = stakeLp0Fruits;
exports.stakeLp0FruitsWithCompTrainer = stakeLp0FruitsWithCompTrainer;
exports.stakeLp1Fruits = stakeLp1Fruits;
exports.stakeLp1FruitsWithCompTrainer = stakeLp1FruitsWithCompTrainer;
exports.stakeLp2Fruits = stakeLp2Fruits;
exports.stakeLp2FruitsWithCompTrainer = stakeLp2FruitsWithCompTrainer;
exports.stakeLp3Fruits = stakeLp3Fruits;
exports.stakeLp3FruitsWithCompTrainer = stakeLp3FruitsWithCompTrainer;
exports.submitProposal = submitProposal;
exports.submitProposalToAddFruit = submitProposalToAddFruit;
exports.unbondFromDragonDen0Fruits = unbondFromDragonDen0Fruits;
exports.unbondFromDragonDen0FruitsWithCompTrainer = unbondFromDragonDen0FruitsWithCompTrainer;
exports.unbondFromDragonDen1Fruits = unbondFromDragonDen1Fruits;
exports.unbondFromDragonDen1FruitsWithCompTrainer = unbondFromDragonDen1FruitsWithCompTrainer;
exports.unbondFromDragonDen2Fruits = unbondFromDragonDen2Fruits;
exports.unbondFromDragonDen2FruitsWithCompTrainer = unbondFromDragonDen2FruitsWithCompTrainer;
exports.unbondFromDragonDen3Fruits = unbondFromDragonDen3Fruits;
exports.unbondFromDragonDen3FruitsWithCompTrainer = unbondFromDragonDen3FruitsWithCompTrainer;
exports.unlockLpTokens = unlockLpTokens;
exports.updateEmissionsPerEpoch = updateEmissionsPerEpoch;
exports.updateFoodCycle = updateFoodCycle;
exports.updateFoodCycleForPoolHive = updateFoodCycleForPoolHive;
exports.updatePoolsGovernanceParams = updatePoolsGovernanceParams;
exports.updateVotesForLockedBee = updateVotesForLockedBee;
exports.verifyAndExtractDragonDen = verifyAndExtractDragonDen;
exports.voteOnGlobalEmissions = voteOnGlobalEmissions;
exports.voteOnGlobalEmissionsWithCompTrainer = voteOnGlobalEmissionsWithCompTrainer;
exports.withdrawDragonBee = withdrawDragonBee;
const __1 = require("..");
const PUBLISHED_AT = __1.dragonfood.PUBLISHED_AT;
const DRAGON_FOOD = __1.dragonfood.DRAGON_FOOD;
const CLOCK = __1.dragonfood.CLOCK;
const YIELD_FARM = __1.dragonfood.YIELD_FARM;
const YIELD_FLOW = __1.dragonfood.YIELD_FLOW;
const BEES_MANAGER = __1.dragonfood.BEES_MANAGER;
const structs_1 = require("../../source/0x1/ascii/structs");
const structs_2 = require("../../source/0x1/option/structs");
const structs_3 = require("../../source/0x1/string/structs");
const util_1 = require("../../_framework/util");
function kraftGenesisHoney(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::kraft_genesis_honey`, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.honeyKraftCap), (0, util_1.obj)(tx, BEES_MANAGER), (0, util_1.pure)(tx, args.lpIncentivesPct, `u64`), (0, util_1.pure)(tx, args.treasuryPct, `u64`), (0, util_1.pure)(tx, args.dragonEggsBasketPct, `u64`), (0, util_1.pure)(tx, args.vestingPct, `u64`)], }); }
function accessDragonDen(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::access_dragon_den`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.trainerAddr, `address`)], }); }
function accessDragonDenFruitClaimIndex(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::access_dragon_den_fruit_claim_index`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.user, `address`), (0, util_1.pure)(tx, args.honeyFruit, `${structs_1.String.$typeName}`)], }); }
function accessDragonDenWithRewards0Fruits(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::access_dragon_den_with_rewards_0_fruits`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.dragonTrainer, `address`)], }); }
function accessDragonDenWithRewards1Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::access_dragon_den_with_rewards_1_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.dragonTrainer, `address`)], }); }
function accessDragonDenWithRewards2Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::access_dragon_den_with_rewards_2_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.dragonTrainer, `address`)], }); }
function accessDragonDenWithRewards3Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::access_dragon_den_with_rewards_3_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.dragonTrainer, `address`)], }); }
function accrueYieldForDragonDen(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::accrue_yield_for_dragon_den`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.pure)(tx, args.curEpoch, `u64`)], }); }
function addBribeForEmissions(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::add_bribe_for_emissions`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.bribeToken), (0, util_1.pure)(tx, args.forCycle, `u64`), (0, util_1.pure)(tx, args.bribeForHiveEmisions, `u64`), (0, util_1.pure)(tx, args.bribeForHoneyEmisions, `u64`)], }); }
function addHiveBribeForPoolHive(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::add_hive_bribe_for_pool_hive`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.hiveCoin), (0, util_1.pure)(tx, args.hiveBribeAmt, `u64`)], }); }
function addHiveToLockedDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::add_hive_to_locked_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.hiveCoin), (0, util_1.pure)(tx, args.hiveAmt, `u64`)], }); }
function addHoneyBribeForPoolHive(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::add_honey_bribe_for_pool_hive`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.honeyTokenIn), (0, util_1.pure)(tx, args.honeyBribeAmt, `u64`)], }); }
function addHoneyToLockedDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::add_honey_to_locked_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.honeyToken), (0, util_1.pure)(tx, args.honeyAmt, `u64`)], }); }
function addMoreFruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::add_more_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.fruits), (0, util_1.pure)(tx, args.addAmount, `u64`)], }); }
function addMoreFruitsCoins(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::add_more_fruits_coins`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.fruits), (0, util_1.pure)(tx, args.addAmount, `u64`)], }); }
function calculateFruitRewards(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::calculate_fruit_rewards`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.fruitRewards), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.pure)(tx, args.totalStaked, `u64`), (0, util_1.pure)(tx, args.curEpoch, `u64`)], }); }
function castvote(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::castVote`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.pure)(tx, args.proposalId, `u64`), (0, util_1.pure)(tx, args.curVote, `bool`)], }); }
function castvoteWithcompprofile(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::castVote_withCompProfile`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.pure)(tx, args.proposalId, `u64`), (0, util_1.pure)(tx, args.curVote, `bool`)], }); }
function claimBribesForUser(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::claim_bribes_for_user`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.bribeABalAmt, `u64`), (0, util_1.pure)(tx, args.bribeBBalAmt, `u64`), (0, util_1.pure)(tx, args.bribeCBalAmt, `u64`), (0, util_1.pure)(tx, args.isThreePool, `bool`)], }); }
function claimFeesFromYieldFlowForPool(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::claim_fees_from_yield_flow_for_pool`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FLOW), (0, util_1.obj)(tx, args.poolHive)], }); }
function claimFruitForDragonDen(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::claim_fruit_for_dragon_den`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.fruitRewards), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.pure)(tx, args.poolHiveAddr, `address`), (0, util_1.pure)(tx, args.totalStaked, `u64`), (0, util_1.pure)(tx, args.curEpoch, `u64`), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.username, `${structs_3.String.$typeName}`), (0, util_1.pure)(tx, args.isWithdraw, `bool`)], }); }
function claimRewardsAndUnbondShares(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::claim_rewards_and_unbond_shares`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.dragonTrainerAddr, `address`), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.pure)(tx, args.unbondAmount, `u64`), (0, util_1.pure)(tx, args.curEpoch, `u64`), (0, util_1.pure)(tx, args.isLiquidation, `bool`)], }); }
function claimTradingFeesForUser(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::claim_trading_fees_for_user`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonBee), (0, util_1.pure)(tx, args.userBeeEnergy, `u256`), (0, util_1.pure)(tx, args.userBeeHealth, `u256`), (0, util_1.pure)(tx, args.feesClaimFrom, `u64`), (0, util_1.pure)(tx, args.feesClaimTill, `u64`)], }); }
function claimVotingRewardsThreePool(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::claim_voting_rewards_three_pool`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, YIELD_FLOW), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer)], }); }
function claimVotingRewardsThreePoolDragonSchool(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::claim_voting_rewards_three_pool_dragon_school`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, YIELD_FLOW), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool)], }); }
function claimVotingRewardsTwoPool(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::claim_voting_rewards_two_pool`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, YIELD_FLOW), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer)], }); }
function claimVotingRewardsTwoPoolDragonSchool(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::claim_voting_rewards_two_pool_dragon_school`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, YIELD_FLOW), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool)], }); }
function claimVotingRewardsTwoPoolWithBurnTax(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::claim_voting_rewards_two_pool_with_burn_tax`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.treasuryCap), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, YIELD_FLOW), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer)], }); }
function computeBribeForUser(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::compute_bribe_for_user`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.bribe), (0, util_1.pure)(tx, args.emissionsCycle, `u64`), (0, util_1.pure)(tx, args.userBeeEnergy, `u256`), (0, util_1.pure)(tx, args.userBeeHealth, `u256`), (0, util_1.pure)(tx, args.activeHiveEnergy, `u256`), (0, util_1.pure)(tx, args.activeHoneyHealth, `u256`)], }); }
function computeBribesForUser(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::compute_bribes_for_user`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.userBeeEnergy, `u256`), (0, util_1.pure)(tx, args.userBeeHealth, `u256`), (0, util_1.pure)(tx, args.bribesClaimFrom, `u64`), (0, util_1.pure)(tx, args.bribesClaimTill, `u64`), (0, util_1.pure)(tx, args.isThreePool, `bool`)], }); }
function depositHiveAsLpIncentives(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::deposit_hive_as_lp_incentives`, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.hiveCoins), (0, util_1.pure)(tx, args.incentivesAmount, `u64`)], }); }
function depositHoneyAsIncentives(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::deposit_honey_as_incentives`, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.honeyBalance)], }); }
function destroyFruitRewards(tx, typeArg, fruitRewards) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::destroy_fruit_rewards`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, fruitRewards)], }); }
function destroyProposal(tx, proposal) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::destroy_proposal`, arguments: [(0, util_1.obj)(tx, proposal)], }); }
function evaluateproposal(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::evaluateProposal`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.proposalId, `u64`), (0, util_1.obj)(tx, args.disperser)], }); }
function executeproposaltoaddfruit(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::executeProposalToAddFruit`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.proposalId, `u64`)], }); }
function executethreepoolproposal(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::executeThreePoolProposal`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.pool), (0, util_1.pure)(tx, args.proposalId, `u64`)], }); }
function executetwopoolproposal(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::executeTwoPoolProposal`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.pool), (0, util_1.pure)(tx, args.proposalId, `u64`)], }); }
function feedBeeInDen(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::feed_bee_in_den`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, BEES_MANAGER), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.pure)(tx, args.version, `u64`)], }); }
function feedDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::feed_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.obj)(tx, args.honeyEarned), (0, util_1.pure)(tx, args.hiveEarnedAmt, `u64`)], }); }
function feedDragonBeeSchool(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::feed_dragon_bee_school`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.obj)(tx, args.honeyEarned), (0, util_1.pure)(tx, args.hiveEarnedAmt, `u64`)], }); }
function gameMasterAddHiveToLockedDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::game_master_add_hive_to_locked_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.obj)(tx, args.hiveCoin), (0, util_1.pure)(tx, args.hiveAmt, `u64`)], }); }
function gameMasterAddHoneyToLockedDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::game_master_add_honey_to_locked_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.honeyToken), (0, util_1.pure)(tx, args.honeyAmt, `u64`)], }); }
function gameMasterFeedBeeInDen(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::game_master_feed_bee_in_den`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.obj)(tx, args.mysticalBee)], }); }
function gameMasterRequestWithdrawalForDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::game_master_request_withdrawal_for_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool)], }); }
function gameMasterWithdrawDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::game_master_withdraw_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool)], }); }
function getBribesForPoolHive(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_bribes_for_pool_hive`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.cycle, `u64`)], }); }
function getClaimedIndexesForDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_claimed_indexes_for_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.dragonTrainer, `address`), (0, util_1.pure)(tx, args.cycle, `u64`)], }); }
function getDragonFood(tx, dragonFood) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_dragon_food`, arguments: [(0, util_1.obj)(tx, dragonFood)], }); }
function getExpectedYield(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_expected_yield`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.pure)(tx, args.curEpoch, `u64`)], }); }
function getFoodEmissions(tx, dragonFood) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_food_emissions`, arguments: [(0, util_1.obj)(tx, dragonFood)], }); }
function getHiveEmissionsVotes(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_hive_emissions_votes`, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.pure)(tx, args.cycle, `u64`)], }); }
function getHoneyEmissionsVotes(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_honey_emissions_votes`, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.pure)(tx, args.cycle, `u64`)], }); }
function getLockedBeesInfo(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_locked_bees_info`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.dragonTrainerAddr, `address`)], }); }
function getLockedDragonBeeInfo(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_locked_dragon_bee_info`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.dragonTrainer, `address`)], }); }
function getOngoingCycle(tx, dragonFood) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_ongoing_cycle`, arguments: [(0, util_1.obj)(tx, dragonFood)], }); }
function getPoolHive(tx, typeArg, poolHive) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_pool_hive`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, poolHive)], }); }
function getPoolHiveAddr(tx, typeArg, dragonFood) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_pool_hive_addr`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, dragonFood)], }); }
function getPoolHiveProposal(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_pool_hive_proposal`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.proposalId, `u64`)], }); }
function getPoolHiveProposalFruitLife(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_pool_hive_proposal_fruit_life`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.proposalId, `u64`)], }); }
function getPoolHiveProposalParams(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_pool_hive_proposal_params`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.proposalId, `u64`)], }); }
function getTotalVotesForDirectingEmissions(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_total_votes_for_directing_emissions`, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.pure)(tx, args.cycle, `u64`)], }); }
function getUserVoteInfo(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_user_vote_info`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.proposalId, `u64`), (0, util_1.pure)(tx, args.trainerAddr, `address`)], }); }
function getVoteConfig(tx, dragonFood) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_vote_config`, arguments: [(0, util_1.obj)(tx, dragonFood)], }); }
function getVotesRcvdForCycle(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::get_votes_rcvd_for_cycle`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.ongoingCycle, `u64`)], }); }
function incrementDragonFood(tx, dragonFood) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::increment_dragon_food`, arguments: [(0, util_1.obj)(tx, dragonFood)], }); }
function incrementPoolHive(tx, typeArg, poolHive) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::increment_pool_hive`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, poolHive)], }); }
function initializeDragonFoodEmissions(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::initialize_dragon_food_emissions`, arguments: [(0, util_1.obj)(tx, args.dragonFoodCap), (0, util_1.pure)(tx, args.startEpoch, `u64`), (0, util_1.pure)(tx, args.hiveProposalDeposit, `u64`), (0, util_1.pure)(tx, args.votingStartDelay, `u64`), (0, util_1.pure)(tx, args.votingPeriodLength, `u64`), (0, util_1.pure)(tx, args.executionDelay, `u64`), (0, util_1.pure)(tx, args.executionPeriodLength, `u64`), (0, util_1.pure)(tx, args.proposalRequiredQuorum, `u64`), (0, util_1.pure)(tx, args.proposalApprovalThreshold, `u64`), (0, util_1.pure)(tx, args.curCycleStartEpoch, `u64`), (0, util_1.pure)(tx, args.cycleDuration, `u64`), (0, util_1.pure)(tx, args.changePctPerCycle, `u64`)], }); }
function internalAddHiveToDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_add_hive_to_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.obj)(tx, args.hiveBalanceToAdd)], }); }
function internalAddHoneyToDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_add_honey_to_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.obj)(tx, args.honeyBalanceToAdd)], }); }
function internalCastvote(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_castVote`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.username, `${structs_3.String.$typeName}`), (0, util_1.pure)(tx, args.proposalId, `u64`), (0, util_1.pure)(tx, args.curVote, `bool`)], }); }
function internalClaimVotingRewardsThreePool(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_claim_voting_rewards_three_pool`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, YIELD_FLOW), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.trainerAddr, `address`)], }); }
function internalClaimVotingRewardsTwoPool(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_claim_voting_rewards_two_pool`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, YIELD_FLOW), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.isBribeTokenClaim, `bool`)], }); }
function internalDepositNoFruits(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_deposit_no_fruits`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.obj)(tx, args.lpBalance), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.username, `${structs_3.String.$typeName}`)], }); }
function internalDepositWith1Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_deposit_with_1_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.obj)(tx, args.lpBalance), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.username, `${structs_3.String.$typeName}`)], }); }
function internalDepositWith2Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_deposit_with_2_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.obj)(tx, args.lpBalance), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.username, `${structs_3.String.$typeName}`)], }); }
function internalDepositWith3Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_deposit_with_3_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.obj)(tx, args.lpBalance), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.username, `${structs_3.String.$typeName}`)], }); }
function internalLockDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_lock_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.mysticalBee), (0, util_1.pure)(tx, args.trainerAddr, `address`)], }); }
function internalProcessWithdrawlRequest(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_process_withdrawl_request`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.trainerAddr, `address`)], }); }
function internalUnbondNoFruits(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_unbond_no_fruits`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function internalUnbondWith1Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_unbond_with_1_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.username, `${structs_3.String.$typeName}`), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function internalUnbondWith2Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_unbond_with_2_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.username, `${structs_3.String.$typeName}`), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function internalUnbondWith3Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_unbond_with_3_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.username, `${structs_3.String.$typeName}`), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function internalVoteOnEmissions(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_vote_on_emissions`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.pure)(tx, args.hiveVoteType, `u8`), (0, util_1.pure)(tx, args.honeyVoteType, `u8`)], }); }
function internalWithdrawDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::internal_withdraw_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.trainerAddr, `address`)], }); }
function kraftNewPoolHiveThreePool(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::kraft_new_pool_hive_three_pool`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.pool)], }); }
function kraftNewPoolHiveTwoPool(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::kraft_new_pool_hive_two_pool`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.pool)], }); }
function liquidateLockedLp(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::liquidate_locked_lp`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.amtToLiquidate, `u64`)], }); }
function lockHiveIfTradingDisabled(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::lock_hive_if_trading_disabled`, arguments: [(0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.hiveBal)], }); }
function lockLpTokensForSchool(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::lock_lp_tokens_for_school`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool)], }); }
function lockLpTokensForTrainer(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::lock_lp_tokens_for_trainer`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer)], }); }
function markBribeAsMemeToken(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::mark_bribe_as_meme_token`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.memeCap), (0, util_1.obj)(tx, args.poolHive)], }); }
function queryAccessDragonDen(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::query_access_dragon_den`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.dragonTrainer, `address`)], }); }
function removeexpiredproposal(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::removeExpiredProposal`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.disperser), (0, util_1.pure)(tx, args.proposalId, `u64`)], }); }
function removeExpiredFruit(tx, typeArgs, poolHive) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::remove_expired_fruit`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, poolHive)], }); }
function requestWithdrawalForDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::request_withdrawal_for_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer)], }); }
function stakeLp(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::stake_lp`, typeArguments: [typeArg], arguments: [(0, util_1.pure)(tx, args.trainerAddr, `address`), (0, util_1.pure)(tx, args.username, `${structs_3.String.$typeName}`), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonDen), (0, util_1.obj)(tx, args.lpBalance), (0, util_1.pure)(tx, args.curEpoch, `u64`)], }); }
function stakeLp0Fruits(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::stake_lp_0_fruits`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.lpBalance)], }); }
function stakeLp0FruitsWithCompTrainer(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::stake_lp_0_fruits_with_comp_trainer`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.obj)(tx, args.lpBalance)], }); }
function stakeLp1Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::stake_lp_1_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.lpBalance)], }); }
function stakeLp1FruitsWithCompTrainer(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::stake_lp_1_fruits_with_comp_trainer`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.obj)(tx, args.lpBalance)], }); }
function stakeLp2Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::stake_lp_2_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.lpBalance)], }); }
function stakeLp2FruitsWithCompTrainer(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::stake_lp_2_fruits_with_comp_trainer`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.obj)(tx, args.lpBalance)], }); }
function stakeLp3Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::stake_lp_3_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.lpBalance)], }); }
function stakeLp3FruitsWithCompTrainer(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::stake_lp_3_fruits_with_comp_trainer`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.obj)(tx, args.lpBalance)], }); }
function submitProposal(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::submit_proposal`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.hiveLockup), (0, util_1.pure)(tx, args.proposalType, `u64`), (0, util_1.pure)(tx, args.title, `${structs_3.String.$typeName}`), (0, util_1.pure)(tx, args.description, `${structs_3.String.$typeName}`), (0, util_1.pure)(tx, args.link, `${structs_3.String.$typeName}`), (0, util_1.pure)(tx, args.newFeeInfo, `${structs_2.Option.$typeName}<vector<u64>>`), (0, util_1.pure)(tx, args.newParams, `${structs_2.Option.$typeName}<vector<u64>>`), (0, util_1.pure)(tx, args.newWeights, `${structs_2.Option.$typeName}<vector<u64>>`)], }); }
function submitProposalToAddFruit(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::submit_proposal_to_add_fruit`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.hiveLockup), (0, util_1.pure)(tx, args.proposalType, `u64`), (0, util_1.pure)(tx, args.title, `${structs_3.String.$typeName}`), (0, util_1.pure)(tx, args.description, `${structs_3.String.$typeName}`), (0, util_1.pure)(tx, args.link, `${structs_3.String.$typeName}`), (0, util_1.pure)(tx, args.fruitStartEpoch, `u64`), (0, util_1.pure)(tx, args.fruitEndEpoch, `u64`)], }); }
function unbondFromDragonDen0Fruits(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::unbond_from_dragon_den_0_fruits`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function unbondFromDragonDen0FruitsWithCompTrainer(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::unbond_from_dragon_den_0_fruits_with_comp_trainer`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function unbondFromDragonDen1Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::unbond_from_dragon_den_1_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function unbondFromDragonDen1FruitsWithCompTrainer(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::unbond_from_dragon_den_1_fruits_with_comp_trainer`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function unbondFromDragonDen2Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::unbond_from_dragon_den_2_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function unbondFromDragonDen2FruitsWithCompTrainer(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::unbond_from_dragon_den_2_fruits_with_comp_trainer`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function unbondFromDragonDen3Fruits(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::unbond_from_dragon_den_3_fruits`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function unbondFromDragonDen3FruitsWithCompTrainer(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::unbond_from_dragon_den_3_fruits_with_comp_trainer`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.pure)(tx, args.unbondAmount, `u64`)], }); }
function unlockLpTokens(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::unlock_lp_tokens`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.trainerAddr, `address`)], }); }
function updateEmissionsPerEpoch(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::update_emissions_per_epoch`, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.newHoneyPerEpoch, `u64`), (0, util_1.pure)(tx, args.newHivePerEpoch, `u64`), (0, util_1.pure)(tx, args.changePctPerCycle, `u64`)], }); }
function updateFoodCycle(tx, dragonFood) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::update_food_cycle`, arguments: [(0, util_1.obj)(tx, dragonFood)], }); }
function updateFoodCycleForPoolHive(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::update_food_cycle_for_pool_hive`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive)], }); }
function updatePoolsGovernanceParams(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::update_pools_governance_params`, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.newParams, `vector<u64>`)], }); }
function updateVotesForLockedBee(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::update_votes_for_locked_bee`, arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.lockedBee)], }); }
function verifyAndExtractDragonDen(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::verify_and_extract_dragon_den`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.pure)(tx, args.trainerAddr, `address`)], }); }
function voteOnGlobalEmissions(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::vote_on_global_emissions`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.pure)(tx, args.hiveVoteType, `u8`), (0, util_1.pure)(tx, args.honeyVoteType, `u8`)], }); }
function voteOnGlobalEmissionsWithCompTrainer(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::vote_on_global_emissions_with_comp_trainer`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonSchool), (0, util_1.pure)(tx, args.hiveVoteType, `u8`), (0, util_1.pure)(tx, args.honeyVoteType, `u8`)], }); }
function withdrawDragonBee(tx, typeArg, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::dragon_food::withdraw_dragon_bee`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, CLOCK), (0, util_1.obj)(tx, DRAGON_FOOD), (0, util_1.obj)(tx, BEES_MANAGER), (0, util_1.obj)(tx, YIELD_FARM), (0, util_1.obj)(tx, args.poolHive), (0, util_1.obj)(tx, args.dragonTrainer)], }); }
