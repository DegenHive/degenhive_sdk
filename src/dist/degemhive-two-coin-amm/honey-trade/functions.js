"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferHoney = transferHoney;
exports.transferHoneyBalance = transferHoneyBalance;
exports.unwrapHoneyTokensToCoins = unwrapHoneyTokensToCoins;
exports.deleteDragonTrainer = deleteDragonTrainer;
exports.entryDepositHoneyInDragonSchool = entryDepositHoneyInDragonSchool;
exports.entryDepositHoneyInTrainer = entryDepositHoneyInTrainer;
exports.harvestYieldFromBees = harvestYieldFromBees;
exports.harvestYieldFromBeesAndReturn = harvestYieldFromBeesAndReturn;
exports.infuseBeeWithEnergy = infuseBeeWithEnergy;
exports.infuseBeeWithHealth = infuseBeeWithHealth;
exports.replenishMasterKeyWithHoney = replenishMasterKeyWithHoney;
exports.sendToHiddenWorld = sendToHiddenWorld;
exports.withdrawFundsFromTrainer = withdrawFundsFromTrainer;
exports.withdrawFundsFromTrainerAndReturn = withdrawFundsFromTrainerAndReturn;
exports.removeLiquidityFromXHoneyPool = removeLiquidityFromXHoneyPool;
exports.swapHoneyCoins = swapHoneyCoins;
exports.addLiquidityToXHoneyPool = addLiquidityToXHoneyPool;
exports.addLiquidityToXHoneyPoolAndReturnLp = addLiquidityToXHoneyPoolAndReturnLp;
exports.burnHoneyFromSupply = burnHoneyFromSupply;
exports.incrementHoneyManager = incrementHoneyManager;
exports.kraftGenesisHoney = kraftGenesisHoney;
exports.kraftMoreHoneyForDragonBees = kraftMoreHoneyForDragonBees;
exports.removeLiquidityFromXHoneyPoolAndReturn = removeLiquidityFromXHoneyPoolAndReturn;
const __1 = require("..");
const PUBLISHED_AT = __1.twopool.PUBLISHED_AT;
const util_1 = require("../../_framework/util");
function transferHoney(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::transfer_honey`, arguments: [(0, util_1.obj)(tx, args.honeyToken), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy), (0, util_1.pure)(tx, args.transferAmt, `u64`), (0, util_1.pure)(tx, args.receipient, `address`)], }); }
function transferHoneyBalance(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::transfer_honey_balance`, arguments: [(0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.honeyBalance), (0, util_1.pure)(tx, args.recepient, `address`)], }); }
function unwrapHoneyTokensToCoins(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::unwrap_honey_tokens_to_coins`, arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.honeyToken), (0, util_1.pure)(tx, args.honeyBribeAmt, `u64`)], }); }
function deleteDragonTrainer(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::delete_dragon_trainer`, arguments: [(0, util_1.obj)(tx, args.dragonTrainerStore), (0, util_1.obj)(tx, args.yieldFarm), (0, util_1.obj)(tx, args.hiveGraph), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.policy)], }); }
function entryDepositHoneyInDragonSchool(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::entry_deposit_honey_in_dragon_school`, arguments: [(0, util_1.obj)(tx, args.profile), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.honeyTokenIn), (0, util_1.pure)(tx, args.honeyToAddAmt, `u64`)], }); }
function entryDepositHoneyInTrainer(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::entry_deposit_honey_in_trainer`, arguments: [(0, util_1.obj)(tx, args.profile), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.honeyTokenIn), (0, util_1.pure)(tx, args.honeyToAddAmt, `u64`)], }); }
function harvestYieldFromBees(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::harvest_yield_from_bees`, arguments: [(0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.yieldFarm), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy)], }); }
function harvestYieldFromBeesAndReturn(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::harvest_yield_from_bees_and_return`, arguments: [(0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.yieldFarm), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy)], }); }
function infuseBeeWithEnergy(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::infuse_bee_with_energy`, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.yieldFarm), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.pure)(tx, args.version, `u64`), (0, util_1.obj)(tx, args.hiveCoin), (0, util_1.pure)(tx, args.hiveToLock, `u64`), (0, util_1.pure)(tx, args.lockupDuration, `u64`)], }); }
function infuseBeeWithHealth(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::infuse_bee_with_health`, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.yieldFarm), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.pure)(tx, args.version, `u64`), (0, util_1.obj)(tx, args.honeyTokenIn), (0, util_1.pure)(tx, args.honeyToAddAmt, `u64`)], }); }
function replenishMasterKeyWithHoney(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::replenish_master_key_with_honey`, arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.honeyTokenIn), (0, util_1.pure)(tx, args.honeyToAddAmt, `u64`)], }); }
function sendToHiddenWorld(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::send_to_hidden_world`, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.hiddenWorld), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.yieldFarm), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.pure)(tx, args.version, `u64`)], }); }
function withdrawFundsFromTrainer(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::withdraw_funds_from_trainer`, arguments: [(0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.yieldFarm), (0, util_1.obj)(tx, args.policy), (0, util_1.pure)(tx, args.toWithdrawSui, `bool`), (0, util_1.pure)(tx, args.toWithdrawHoney, `bool`)], }); }
function withdrawFundsFromTrainerAndReturn(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::withdraw_funds_from_trainer_and_return`, arguments: [(0, util_1.obj)(tx, args.dragonTrainer), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.yieldFarm), (0, util_1.obj)(tx, args.policy), (0, util_1.pure)(tx, args.toWithdrawSui, `bool`), (0, util_1.pure)(tx, args.toWithdrawHoney, `bool`)], }); }
function removeLiquidityFromXHoneyPool(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::remove_liquidity_from_x_honey_pool`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.lpCoins), (0, util_1.pure)(tx, args.coinXOutVal, `u64`), (0, util_1.pure)(tx, args.coinYOutVal, `u64`), (0, util_1.pure)(tx, args.maxLpCoinsToBurn, `u64`), (0, util_1.obj)(tx, args.policy)], }); }
function swapHoneyCoins(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::swap_honey_coins`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.xIn), (0, util_1.pure)(tx, args.xInAmt, `u64`), (0, util_1.pure)(tx, args.xOutMin, `u64`), (0, util_1.obj)(tx, args.honeyTokenIn), (0, util_1.pure)(tx, args.yInAmt, `u64`), (0, util_1.pure)(tx, args.yOutMin, `u64`), (0, util_1.pure)(tx, args.isGiveIn, `bool`), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy)], }); }
function addLiquidityToXHoneyPool(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::add_liquidity_to_x_honey_pool`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.coinX), (0, util_1.obj)(tx, args.honeyTokenIn), (0, util_1.pure)(tx, args.honeyToAdd, `u64`), (0, util_1.pure)(tx, args.minLpMinted, `u64`), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy)], }); }
function addLiquidityToXHoneyPoolAndReturnLp(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::add_liquidity_to_x_honey_pool_and_return_lp`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.coinX), (0, util_1.obj)(tx, args.honeyTokenIn), (0, util_1.pure)(tx, args.honeyToAdd, `u64`), (0, util_1.pure)(tx, args.minLpMinted, `u64`), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.policy)], }); }
function burnHoneyFromSupply(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::burn_honey_from_supply`, arguments: [(0, util_1.obj)(tx, args.yieldFlow), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.honeyManager)], }); }
function incrementHoneyManager(tx, typeArg, honeyManager) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::increment_honey_manager`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, honeyManager)], }); }
function kraftGenesisHoney(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::kraft_genesis_honey`, arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, args.honeyKraftCap), (0, util_1.obj)(tx, args.beesManager), (0, util_1.pure)(tx, args.lpIncentivesPct, `u64`), (0, util_1.pure)(tx, args.treasuryPct, `u64`), (0, util_1.pure)(tx, args.dragonEggsBasketPct, `u64`), (0, util_1.pure)(tx, args.vestingPct, `u64`)], }); }
function kraftMoreHoneyForDragonBees(tx, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::kraft_more_honey_for_dragon_bees`, arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, args.honeyManager), (0, util_1.obj)(tx, args.beesManager), (0, util_1.pure)(tx, args.honeyToMint, `u64`), (0, util_1.pure)(tx, args.lpIncentivesPct, `u64`)], }); }
function removeLiquidityFromXHoneyPoolAndReturn(tx, typeArgs, args) { return tx.moveCall({ target: `${PUBLISHED_AT}::honey_trade::remove_liquidity_from_x_honey_pool_and_return`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.lpCoins), (0, util_1.pure)(tx, args.lpToBurn, `u64`), (0, util_1.pure)(tx, args.coinXOutVal, `u64`), (0, util_1.pure)(tx, args.coinYOutVal, `u64`), (0, util_1.pure)(tx, args.maxLpCoinsToBurn, `u64`), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.honeyManager)], }); }
