"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferBees = transferBees;
exports.transferBeesBalance = transferBeesBalance;
exports.addBidForStreamerBuzzes = addBidForStreamerBuzzes;
exports.claimStreamRewardsWithdrawBid = claimStreamRewardsWithdrawBid;
exports.incrementStreamPart2 = incrementStreamPart2;
exports.interactWithStreamBuzz = interactWithStreamBuzz;
exports.interactWithStreamBuzzNoUrl = interactWithStreamBuzzNoUrl;
exports.likeStreamBuzz = likeStreamBuzz;
exports.upvoteHiveBuzz = upvoteHiveBuzz;
exports.removeLiquidityFromXBeePool = removeLiquidityFromXBeePool;
exports.swapBeeCoins = swapBeeCoins;
exports.addLiquidityToXBeePool = addLiquidityToXBeePool;
exports.addLiquidityToXBeePoolAndReturnLp = addLiquidityToXBeePoolAndReturnLp;
exports.burnBeesFromSupply = burnBeesFromSupply;
exports.claimBeesForChronicleFarming = claimBeesForChronicleFarming;
exports.depositBeeToDexDao = depositBeeToDexDao;
exports.incrementBeesManager = incrementBeesManager;
exports.kraftGenesisBees = kraftGenesisBees;
exports.removeLiquidityFromXBeePoolAndReturn = removeLiquidityFromXBeePoolAndReturn;
exports.transferBeesFromTreasury = transferBeesFromTreasury;
exports.updateBeeForEngagementPerEpoch = updateBeeForEngagementPerEpoch;
const __1 = require("..");
const structs_1 = require("../../_dependencies/source/0x1/option/structs");
const structs_2 = require("../../_dependencies/source/0x1/string/structs");
const util_1 = require("../../_framework/util");
function transferBees(tx, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::transfer_bees`, arguments: [(0, util_1.obj)(tx, args.beeToken), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy), (0, util_1.pure)(tx, args.transferAmt, `u64`), (0, util_1.pure)(tx, args.receipient, `address`)], }); }
function transferBeesBalance(tx, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::transfer_bees_balance`, arguments: [(0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.beesBalance), (0, util_1.pure)(tx, args.recepient, `address`)], }); }
function addBidForStreamerBuzzes(tx, typeArg, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::add_bid_for_streamer_buzzes`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.mappingStore), (0, util_1.obj)(tx, args.hiveVault), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.userProfile), (0, util_1.obj)(tx, args.suiCoin), (0, util_1.pure)(tx, args.addToBid, `u64`), (0, util_1.pure)(tx, args.newBuzzCostInHive, `u64`), (0, util_1.pure)(tx, args.accessType, `u8`), (0, util_1.pure)(tx, args.collectionName, `${structs_2.String.$typeName}`)], }); }
function claimStreamRewardsWithdrawBid(tx, typeArg, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::claim_stream_rewards_withdraw_bid`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.mappingStore), (0, util_1.obj)(tx, args.hiveVault), (0, util_1.obj)(tx, args.userProfile), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy)], }); }
function incrementStreamPart2(tx, typeArg, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::increment_stream_part_2`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.mappingStore), (0, util_1.obj)(tx, args.hiveVault), (0, util_1.obj)(tx, args.newStreamerRank1), (0, util_1.obj)(tx, args.newStreamerRank2), (0, util_1.obj)(tx, args.newStreamerRank3), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy)], }); }
function interactWithStreamBuzz(tx, typeArg, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::interact_with_stream_buzz`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.mappingStore), (0, util_1.obj)(tx, args.hiveManager), (0, util_1.obj)(tx, args.hiveVault), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.hiveDisperser), (0, util_1.obj)(tx, args.userProfile), (0, util_1.obj)(tx, args.streamerProfile), (0, util_1.pure)(tx, args.streamIndex, `u64`), (0, util_1.pure)(tx, args.streamInnerIndex, `u64`), (0, util_1.pure)(tx, args.userBuzz, `${structs_2.String.$typeName}`), (0, util_1.pure)(tx, args.userGenAi, `${structs_1.Option.$typeName}<${structs_2.String.$typeName}>`)], }); }
function interactWithStreamBuzzNoUrl(tx, typeArg, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::interact_with_stream_buzz_no_url`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.mappingStore), (0, util_1.obj)(tx, args.hiveManager), (0, util_1.obj)(tx, args.hiveVault), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.hiveDisperser), (0, util_1.obj)(tx, args.userProfile), (0, util_1.obj)(tx, args.streamerProfile), (0, util_1.pure)(tx, args.streamIndex, `u64`), (0, util_1.pure)(tx, args.streamInnerIndex, `u64`), (0, util_1.pure)(tx, args.userBuzz, `${structs_2.String.$typeName}`)], }); }
function likeStreamBuzz(tx, typeArg, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::like_stream_buzz`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.mappingStore), (0, util_1.obj)(tx, args.hiveManager), (0, util_1.obj)(tx, args.hiveVault), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.userProfile), (0, util_1.pure)(tx, args.streamIndex, `u64`), (0, util_1.pure)(tx, args.streamInnerIndex, `u64`)], }); }
function upvoteHiveBuzz(tx, typeArg, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::upvote_hive_buzz`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.mappingStore), (0, util_1.obj)(tx, args.hiveManager), (0, util_1.obj)(tx, args.hiveVault), (0, util_1.obj)(tx, args.userProfile), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy), (0, util_1.pure)(tx, args.hiveBuzzByProfile, `address`), (0, util_1.pure)(tx, args.streamIndex, `u64`), (0, util_1.pure)(tx, args.streamInnerIndex, `u64`)], }); }
function removeLiquidityFromXBeePool(tx, typeArgs, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::remove_liquidity_from_x_bee_pool`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.lpCoins), (0, util_1.pure)(tx, args.coinXOutVal, `u64`), (0, util_1.pure)(tx, args.coinYOutVal, `u64`), (0, util_1.pure)(tx, args.maxLpCoinsToBurn, `u64`), (0, util_1.obj)(tx, args.policy)], }); }
function swapBeeCoins(tx, typeArgs, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::swap_bee_coins`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.xIn), (0, util_1.pure)(tx, args.xInAmt, `u64`), (0, util_1.pure)(tx, args.xOutMin, `u64`), (0, util_1.obj)(tx, args.beesTokenIn), (0, util_1.pure)(tx, args.yInAmt, `u64`), (0, util_1.pure)(tx, args.yOutMin, `u64`), (0, util_1.pure)(tx, args.isGiveIn, `bool`), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy)], }); }
function addLiquidityToXBeePool(tx, typeArgs, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::add_liquidity_to_x_bee_pool`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.coinX), (0, util_1.obj)(tx, args.beesTokenIn), (0, util_1.pure)(tx, args.beesToAdd, `u64`), (0, util_1.pure)(tx, args.minLpMinted, `u64`), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy)], }); }
function addLiquidityToXBeePoolAndReturnLp(tx, typeArgs, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::add_liquidity_to_x_bee_pool_and_return_lp`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.coinX), (0, util_1.obj)(tx, args.beesTokenIn), (0, util_1.pure)(tx, args.beesToAdd, `u64`), (0, util_1.pure)(tx, args.minLpMinted, `u64`), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy)], }); }
function burnBeesFromSupply(tx, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::burn_bees_from_supply`, arguments: [(0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.beesManager)], }); }
function claimBeesForChronicleFarming(tx, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::claim_bees_for_chronicle_farming`, arguments: [(0, util_1.obj)(tx, args.hiveEntryCap), (0, util_1.obj)(tx, args.beesManager)], }); }
function depositBeeToDexDao(tx, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::deposit_bee_to_dex_dao`, arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, args.beesManager), (0, util_1.pure)(tx, args.transferAmt, `u64`)], }); }
function incrementBeesManager(tx, typeArg, beesManager) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::increment_bees_manager`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, beesManager)], }); }
function kraftGenesisBees(tx, typeArg, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::kraft_genesis_bees`, typeArguments: [typeArg], arguments: [(0, util_1.obj)(tx, args.hiveVault), (0, util_1.obj)(tx, args.beeKraftCap)], }); }
function removeLiquidityFromXBeePoolAndReturn(tx, typeArgs, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::remove_liquidity_from_x_bee_pool_and_return`, typeArguments: typeArgs, arguments: [(0, util_1.obj)(tx, args.clock), (0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.lpCoins), (0, util_1.pure)(tx, args.lpToBurn, `u64`), (0, util_1.pure)(tx, args.coinXOutVal, `u64`), (0, util_1.pure)(tx, args.coinYOutVal, `u64`), (0, util_1.pure)(tx, args.maxLpCoinsToBurn, `u64`), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.beesManager)], }); }
function transferBeesFromTreasury(tx, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::transfer_bees_from_treasury`, arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, args.beesManager), (0, util_1.obj)(tx, args.policy), (0, util_1.pure)(tx, args.transferAmt, `u64`), (0, util_1.pure)(tx, args.receipient, `address`)], }); }
function updateBeeForEngagementPerEpoch(tx, args) { return tx.moveCall({ target: `${__1.PUBLISHED_AT}::bee_trade::update_bee_for_engagement_per_epoch`, arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, args.beesManager), (0, util_1.pure)(tx, args.beeForEngagementPerEpoch, `u64`)], }); }
